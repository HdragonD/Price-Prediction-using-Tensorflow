# pip install tensorflow  # Un-comment if TensorFlow is not installed
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
from sklearn.metrics import r2_score
import os
from datetime import datetime

import warnings 
warnings.filterwarnings("ignore") 

# Path to CSV file
DATA_PATH = os.getenv("STOCK_CSV", "all_stocks_5yr.csv")
data = pd.read_csv(DATA_PATH)
print(data.shape) 
print(data.sample(7)) 
data.info()
data['date'] = pd.to_datetime(data['date']) 
data.info() 

companies=("AAPL","AMD","FB","GOOGL","AMZN","NVDA","EBAY","CSCO","IBM")
data['date'] = pd.to_datetime(data['date']) 
# date vs open 
# date vs close 
plt.figure(figsize=(15, 8)) 
for index,company in enumerate(companies , 1): 
    plt.subplot(3, 3, index) 
    c = data[data['Name'] == company] 
    plt.plot(c['date'], c['close'], c="r", label="close", marker="+") 
    plt.plot(c['date'], c['open'], c="g", label="open", marker="^") 
    plt.title(company) 
    plt.legend() 
    plt.tight_layout() 

apple = data[data['Name'] == 'AAPL'] 
prediction_range = apple.loc[(apple['date'] > datetime(2013,1,1)) 
& (apple['date']<datetime(2018,1,1))] 
plt.plot(apple['date'],apple['close']) 
plt.xlabel("Date") 
plt.ylabel("Close") 
plt.title("Apple Stock Prices") 
plt.show()

close_data = apple.filter(['close']) 
dataset = close_data.values 
training = int(np.ceil(len(dataset) * .95)) 
print(training) 

from sklearn.preprocessing import MinMaxScaler 

scaler = MinMaxScaler(feature_range=(0, 1)) 
scaled_data = scaler.fit_transform(dataset) 

train_data = scaled_data[0:int(training), :] 
# prepare feature and labels 
x_train = [] 
y_train = [] 

for i in range(60, len(train_data)): 
	x_train.append(train_data[i-60:i, 0]) 
	y_train.append(train_data[i, 0]) 

x_train, y_train = np.array(x_train), np.array(y_train) 
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1)) 

model = keras.models.Sequential([
    keras.layers.LSTM(128, return_sequences=True,
                      input_shape=(x_train.shape[1], 1)),
    keras.layers.LSTM(128, return_sequences=True),
    keras.layers.LSTM(64),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dropout(0.5),
    keras.layers.Dense(1)
])
model.summary()

model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001),
                        loss='mean_squared_error')
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss',
                                           patience=10,
                                           restore_best_weights=True)
history = model.fit(x_train,
                                        y_train,
                                        epochs=100,
                                        validation_split=0.1,
                                        callbacks=[early_stop])

test_data = scaled_data[training - 60:, :] 
x_test = [] 
y_test = dataset[training:, :] 
for i in range(60, len(test_data)): 
	x_test.append(test_data[i-60:i, 0]) 

x_test = np.array(x_test) 
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1)) 

# predict the testing data 
predictions = model.predict(x_test) 
predictions = scaler.inverse_transform(predictions) 

# evaluation metrics 
mse = np.mean(((predictions - y_test) ** 2))
print("MSE", mse)
print("RMSE", np.sqrt(mse))
r2 = r2_score(y_test, predictions)
print("R2 Score", r2)

train = apple[:training] 
test = apple[training:] 
test['Predictions'] = predictions 

plt.figure(figsize=(10, 8)) 
plt.plot(train['date'], train['close']) 
plt.plot(test['date'], test[['close', 'Predictions']]) 
plt.title('Apple Stock Close Price')
plt.xlabel('Date')
plt.ylabel("Close")
plt.legend(['Train', 'Test', 'Predictions'])
plt.show()
